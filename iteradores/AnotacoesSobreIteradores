            ITERAÇÃO

É o processo de repetição na qual um bloco de instrução é executado enquanto uma determinada condição for atendida

instrução while >>> while quer dizer enquanto ... ou seja ... nós passamos uma condição para nossa instrução
e enquanto a nossa condição for TRUE, ele retorna o loop e faz a verificação novamente, em nosso bloco de instruções
devemos sempre colocar de forma que nossa condição seja alcançada, caso contrário entra em um loop infinito
e isso dependendo do que estamos desenvolvendo pode se tornar um problema.

Quando temos uma estrutura " IF " apenas uma das condições são executadas, ou seja, se a condição for verdadeira
então será executado o que tiver no bloco de instrução IF, e se a instrução for " FALSE " então será executado
o bloco de instrução da condição ELSE.

Já com o uso da instrução "WHILE" eu posso utilizar o ELSE porque enquanto a minha condição for verdade, ele vai fazer
novamente o loop e quando não for mais irá executar a instrução do bloco ELSE.

====================================================================================================================
            FOR LOOP

É uma estrutura de repetição que executa um ciclo para cada elemento do objeto que está sendo iterado.
Se por exemplo eu tiver uma lista de [1,2,3,4,5,6,7,8,9,10] e rodar a estrutura abaixo, deverá ser impresso na tela o
seguinte resultado:

Exemplo:

                     lista = [1,2,3,4,5,6,7,8,9,10]

                     for i in lista:
                        print(i)

                     Saída:
                     1
                     2
                     3
                     4
                     5
                     6
                     7
                     8
                     9
                     10

====================================================================================================================
            FUNÇÃO RANGE

Retorna uma série numérica no intervalo enviado e cujo os elementos contidos serão gerados sob demanda

]x[ >>> Sempre que tivermos um número entre os colchetes opostos, isso quer dizer que todos os números contidos no 
intervalo estão inclusos, menos os dois extremos.

====================================================================================================================
            INSTRUÇÃO BREAK

É a instrução que interrompe a execução do laço de repetição na qual está contida, isso irá ocorrer porque verificamos
uma condição e vemos que já atingimos nosso objetivo. Logo, não há razão para continuarmos executando um laço de repetição
ou então continuar executando o ciclo. Assim, nós precisamos de uma função que finalize o nosso laço de repetição,
 ou mesmo, que finalize um único ciclo.

 É importante lembrar que, toda vez que pudermos interromper um laço de repetição, assim devemos fazer.
 Até porque, quando nós interrompemos um laço de repetição, economizamos recursos do computador e também tornamos a nossa
 aplicação mais rápida.

====================================================================================================================
            INSTRUÇÃO CONTINUE

A instrução " continue " é bem semelhante ao " break ", a diferença é que quando nós atingimos a nossa condição
ele interrompe a execução de apenas um único ciclo, ou seja, finaliza uma repetição, porém, ela não termina a 
execução do nosso laço

====================================================================================================================
            GERADORES

Os geradores são iteradores, mas vocÊ só pode iterá-los uma vez. É porque eles não armazenam todos os valores na memória,
eles geram os valores em tempo real. Você os usa iterando sobre eles, seja com um loop 'for' ou passando-os para qualquer
função ou construção que seja iterada. Na maiora das vezes, generators são implementados como funções. No entando, 
eles não têm return valor, eles yield o fazem. Aqui está um exemplo simples de uma generator função.

====================================================================================================================
            ITERS

>>> Iterável:
      Um 'iterable' é qualquer objeto em Python que tenha um __iter__ ou um __getitem__ método definido que retorne
      um iterador ou possa obter índices. Em resumo, iterável qualquer objeto pode nos fornecer um iterador.

>>> Iterador:
      Um iterador é qualquer objeto no Python que tenha um next ou __next__ método definido.

>>> Iteração:
      É o processo de pegar um item de algo, por exemplo, uma lista. Quando usamos um loop para fazer um loop 
      sobre algo, ele é chamado de iteração. É o nome dado ao processo em si.


>>>>>>>>>>  EXEMPLO  <<<<<<<<<<<

In [58]: def generator_function():
    ...:     for i in range(10):
    ...:         yield i
    ...:         

In [61]: for item in generator_function():
    ...:     print(item)
    ...:     
0
1
2
3
4
5
6
7
8
9


